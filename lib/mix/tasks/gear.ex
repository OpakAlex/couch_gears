defmodule Mix.Tasks.Gear do
  use Mix.Task

  import Mix.Generator
  import Mix.Utils, only: [camelize: 1, underscore: 1]

  @version CouchGears.Mixfile.project[:version]
  @shortdoc "Create a new CouchGears project"


  @moduledoc """
      mix gear hello_gear
  """
  def run(argv) do
    { opts, argv } = OptionParser.parse(argv, flags: [:dev])
    case argv do
      [] ->
        raise Mix.Error, message: "expected PATH to be given, please use `mix gears PATH`"
      [path] ->
        File.mkdir_p!(path)
        File.cd!(path, fn -> do_generate(opts) end)
    end
  end


  defp do_generate(opts) do

    couch_gears_source = if opts[:dev] do
      %b(raw: "#{File.expand_path("../../../..", __FILE__)}")
    else
      %b(github: "datahogs/couch_gears")
    end

    assigns = [version: @version, couch_gears_source: couch_gears_source]

    create_file ".gitignore", gitignore_text
    create_file "Makefile",   makefile_text
    create_file "mix.exs",    mixfile_template(assigns)

    create_directory "app"
    create_directory "app/routers"
    create_file "app/routers/application_router.ex", app_router_text

    create_directory "lib"
    create_file "lib/couch_gear_application.ex", lib_app_text
  end


  embed_text :gitignore, """
  /ebin
  /deps
  erl_crash.dump
  """

  embed_text :makefile, from_file("../../../../Makefile")

  embed_template :mixfile, """
  defmodule CouchGearApplication.Mixfile do
    use Mix.Project

    def project do
      [ app: :couch_gear_application,
        version: "0.0.1",
        dynamos: [CouchGearApplication],
        compilers: [:elixir, :dynamo, :couch_gears, :app],
        deps: deps ]
    end

    # Configuration for the OTP application
    def application do
      []
    end

    defp deps do
      [ {:couch_gears, "<%= @version %>", <%= @couch_gears_source %>} ]
    end
  end
  """

  embed_text :app_router, """
  defmodule ApplicationRouter do
    use CouchGears.Router

    # prepare do
      # Pick which parts of the request you want to fetch
      # You can comment the line below if you don't need
      # any of them or move them to a forwarded router
      # conn.fetch([:cookies, :params])
    # end

    # It is common to break your application in many
    # routers forwarding the requests between them
    # forward "/posts", to: PostsRouter

    get "/" do
      conn.resp_body("Yo")
    end
  end
  """

  embed_text :lib_app, """
  defmodule CouchGearApplication do
    use CouchGears

    endpoint ApplicationRouter

    config :dynamo,
      # compile_on_demand: true,
      # The OTP application from where static assets will be served
      # Defaults to the name of the .app file generated by mix
      otp_app: :couch_gear_application


    initializer :start_otp_app do
      :application.start config[:dynamo][:otp_app]
    end
  end
  """
end